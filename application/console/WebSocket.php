<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/8/11 0011
 * Time: 9:17
 */

namespace app\console;

//命令行核心
use Predis\Client;
use think\Config;
use think\console\Input;
use think\console\Output;

//核心
//核心

class WebSocket extends Common
{
    protected $server;

    //下方的异步定时器
    protected $time_id;

    //redis 连接
    protected $redis;

    protected $all_user;

    protected $room;

    protected $all_fd;

    public static $demo;

    public function init()
    {


    }

    public function __construct()
    {

        //所有人表
        /**
         * user_id=>[
         *  'fd'=>'fd',
         *  'username'=>'username',
         *  'id'=>'id',
         *  'token'=>'token'
         * ]
         */

        if (!$this->all_user instanceof \swoole_table) {
            $this->all_user = new \swoole_table(1048576); //2的100次方个
            $this->all_user->column('fd', \swoole_table::TYPE_INT, 8);
            $this->all_user->column('username', \swoole_table::TYPE_STRING, 32);
            $this->all_user->column('id', \swoole_table::TYPE_STRING, 16);
            $this->all_user->column('token', \swoole_table::TYPE_STRING, 64);
            $this->all_user->create();
        }

        /**
         * 所有人fd表
         */
        if (!$this->all_fd instanceof \swoole_table) {
            $this->all_fd = new \swoole_table(1048576);
            $this->all_fd->column('fd', \swoole_table::TYPE_INT, 8);
            $this->all_fd->column('id', \swoole_table::TYPE_INT, 16);
            $this->all_fd->column('username', \swoole_table::TYPE_STRING, 32);
            $this->all_fd->create();
        }


        //所有的聊天室
        /**
         * $room_id=>[
         *          room_id=>room_id,
         *          admin_user=>admin_user
         *          ]
         */
        if (!$this->room instanceof \swoole_table) {
            $this->room = new \swoole_table(1048576);
            $this->room->column('room_id', \swoole_table::TYPE_INT, 8);
            $this->room->column('admin_user', \swoole_table::TYPE_STRING, 32);
            $this->room->create();
        }

        if (!$this->redis instanceof Client) {
            $this->redis = new Client(Config::get('redis'));
        }

    }

    //命令行配置函数
    protected function configure()
    {
        $this->setName('websocket:start')->setDescription('start Web Server Server!');
        //        parent::configure(); // TODO: Change the autogenerated stub
    }


    protected function execute(Input $input, Output $output)
    {


        $this->server = new \swoole_websocket_server('0.0.0.0', 9501);

        $this->server->set([
            'daemonize' => false,
            'max_request' => 2000,
        ]);


        $this->server->on('Start', [$this, 'onStart']);


        $this->server->on('Connect', [$this, 'onConnect']);

        $this->server->on('Open', [$this, 'onOpen']);

        $this->server->on('Message', [$this, 'onMessage']);

        $this->server->on('Close', [$this, 'onClose']);

        $this->server->on('WorkerStart', [$this, 'onWorkerStart']);

//        $this->server->on('Shutdown', [$this, 'onShutdown']);

        $this->server->start();

//        $output->writeln("WebSocket:start.\n");
//        parent::execute($input, $output); // TODO: Change the autogenerated stub
    }


    public function onStart()
    {
        echo "server is start!\n";
//        parent::onStart(); // TODO: Change the autogenerated stub


    }

    public function onWorkerStart()
    {


    }

    public function onConnect()
    {
        echo "is onConnect\n";

    }


    public function onOpen(\swoole_websocket_server $server, \swoole_http_request $request)
    {
        echo "server:握手成功！用户id：{$request->fd}\n";


//        $this->time_id = swoole_timer_tick(1000, function () use ($request, $server) {
//            $server->push($request->fd, 'demo');
//        });

        $token = $request->get['token'];

        $data = explode('__', $token);

        if (count($data) == 2) {

            $userId = $data[0];

            if ($this->redis->hget($userId, 'token') == $token) {

                //存储用户信息
                $hash = array('fd' => $request->fd, 'online' => true, 'token' => $token);

                $this->redis->hmset($userId, $hash);


                //存进fd到所有用户内存表 fd=>$array

                $array = array('fd' => $request->fd, 'userId' => $userId, 'token' => $token);

                $this->all_user->set($request->fd, $array);

                //存一个对应的表 id=>$array
                $this->all_fd->set($userId, $array);

            }

            //添加id到room_0
            $this->redis->hset('room_0', $userId, $request->fd);

            $room = $this->redis->hkeys('room_0');


            //room 循环广播
            foreach ($room as $item) {

                $server->push($item, '新小伙伴' . $request->fd . '加入聊天室');

            }

        } else unset($data);
    }



    public function onMessage(\swoole_websocket_server $server, \swoole_websocket_frame $frame)
    {

        //$data 0__$user__$massage      //protect
        //$data 1__$room__$massage      //room
        //$data 2__all_user__$massage  //all_user

        echo "message form {$frame->fd}:{$frame->data},opcode:{$frame->opcode},fin:{$frame->finish}\n";

        $data = explode('__', $frame->data);  //发送过来的整条数据
        $type = $data[0];                              //数据接收对象类型 0：为私聊 1：聊天室 2：所有用户广播
        $id = $data[1];
        $massage = $data[2];
        $fd = $frame->fd;
        $from_user_id = $this->all_fd->get($fd)['id'];
        $from_user_name = $this->all_fd->get($fd)['username'];

        //type__id__name__id__data
        $send_massage = $type . '__' . $from_user_id . '__' . $from_user_name . '__' . $id . '__' . $massage;

        switch ($type) {
            //私聊
            case 0:

                $server->push($this->all_user->get($id, 'fd'), $send_massage);
                break;

            case 1: //聊天室
                $room_id = $this->room->get($id, 'room_id');
                $fd_array = $this->redis->hgetall($room_id);
                foreach ($fd_array as $fd) {

                    $server->push($fd, $send_massage);
                }

                break;

            case 2:  //群发

                if ($id == 'all_user') {

                    foreach ($this->all_user as $user) {

                        $server->push($user['fd'], $send_massage);
                    }

                }
        }


        if ($this->redis instanceof Client) {

        } else echo 'redis-error' . __LINE__;


//        $server->push($frame->fd, "hello:{$frame->fd},this is server!");


    }

    //指的是客户端关闭
    public function onClose(\swoole_websocket_server $server, $fd)
    {
        echo "client {$fd} closed\n";


        if ($this->redis instanceof Client) {

            $username = $this->redis->hget($fd, 'username');

            //整理user
            $this->redis->hset($username, 'online', false);

            $this->redis->hset($username, 'fd', false);

            //清除fd
            $this->redis->del($fd);

            //从聊天室退出清除fd
            $this->redis->hdel('room1', $fd);

            //广播推出信息

            foreach ($this->all_user as $item) {
                $server->push($item, '小伙伴' . $item['fd'] . '退出聊天室');
            }

//            foreach ($this->redis->hkeys('room1') as $hkey) {
//                $server->push($hkey, '小伙伴' . $fd . '退出聊天室');
//            }
            echo 'clear', $fd;
        } else echo 'redis-error' . __LINE__;


//        if (!empty($this->time_id)) swoole_timer_clear($this->time_id);

    }


}